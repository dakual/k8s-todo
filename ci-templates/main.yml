variables:
  PROJECT: todo

include:
  - local: '/ci-templates/environments/dev.yml'
    rules:
      - if: $CI_COMMIT_TAG !~ /release-v.*/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  - local: '/ci-templates/environments/stg.yml'
    rules:
      - if: $CI_COMMIT_TAG !~ /release-v.*/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - local: '/ci-templates/environments/prd.yml'
    rules:
      - if: $CI_COMMIT_TAG =~ /release-v.*/

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG =~ /release-v.*/'
    - if: '$CI_PIPELINE_SOURCE == "web"'


stages:
  - build
  - package
  - deploy
  - database
  - release
  - destroy


.dev-rules:
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/

.dev-destroy-rules:
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/
      when: manual

.stg-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/

.stg-destroy-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/
      when: manual

.prd-rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /release-v.*/

.prd-destroy-rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /release-v.*/
      when: manual



.build:
  stage: build
  image: docker:latest
  variables:
    REPOSITORY: ${CI_REGISTRY_IMAGE}/${APP}
    IMAGE_TAG: ${ENV}-${CI_COMMIT_REF_SLUG}
  services:
    - docker:dind
  before_script:
    - cd app/${APP}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build  --no-cache ${BUILD_ARGS} --tag ${REPOSITORY}:${IMAGE_TAG} .
    - docker push ${REPOSITORY}:${IMAGE_TAG}
  tags:
    - ${RUNNER}


.deploy-configure:
  image:
    name: alpine/helm:3.10.2
    entrypoint: [""]
  variables:
    IMAGE_TAG: ${ENV}-${CI_COMMIT_REF_SLUG}
  before_script: 
    - chmod 600 $KUBECONFIG
    - helm plugin install --version=v0.10.3 https://github.com/chartmuseum/helm-push.git
    - |
      helm repo add ${PROJECT} \
      --username ${CI_REGISTRY_USER} \
      --password ${CI_REGISTRY_PASSWORD} \
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable
    - |
      if [ "${ENV}" == "dev" ]; then
        export NAMESPACE=${ENV}-${CI_COMMIT_REF_SLUG:0:59}
      else
        export NAMESPACE=${ENV_LONG}
      fi
    - curl -LO https://dl.k8s.io/release/v1.26.0/bin/linux/arm64/kubectl
    - chmod +x kubectl && mv kubectl /usr/bin/kubectl
    - kubectl config get-contexts
    - kubectl config use-context ${AGENT}
    - cd ./helm-charts


.helm-package:
  extends:
    - .deploy-configure
  stage: package
  script:
    - helm package .
    - helm cm-push . ${PROJECT}
  tags: 
    - ${RUNNER}
  artifacts:
    expire_in: 1 hour
    paths:
      - charts/${PROJECT}/${PROJECT}*.tgz


.deploy:
  extends:
    - .deploy-configure
  stage: deploy
  script:
    - |
      helm dependency update .
      helm upgrade \
        --atomic \
        --timeout 5m \
        --install ${PROJECT} . \
        --reset-values \
        --namespace ${NAMESPACE} \
        --create-namespace \
        --set deployments.backend.image.repository=${CI_REGISTRY_IMAGE}/backend  \
        --set deployments.backend.image.tag=${IMAGE_TAG}  \
        --set deployments.backend.ingress.host=api.${DOMAIN} \
        --set deployments.frontend.image.repository=${CI_REGISTRY_IMAGE}/frontend  \
        --set deployments.frontend.image.tag=${IMAGE_TAG}  \
        --set deployments.frontend.ingress.host=${DOMAIN}
  tags:
    - ${RUNNER}


.database-configure:
  stage: database
  image: docker:latest
  variables:
    MYSQL_HOST: mysqldb
    MYSQL_PORT: 3306
    MYSQL_USER: root
    MYSQL_PASSWORD: root
    MYSQL_DATABASE: todo
  # services:
  #   - name: arm64v8/mysql:8.0
  #     alias: db
  before_script:
    - apk add --update mysql-client
    - mysql --version
    - mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "${MYSQL_HOST}" "${MYSQL_DATABASE}"
  script:
    - echo "SHOW tables;"
  tags:
    - ${RUNNER}


.release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release job"
  release: 
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Docker Container'
          url: 'https://${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}'
  tags:
    - ${RUNNER}


.destroy:
  extends:
    - .deploy-configure
  stage: destroy
  script:
    - helm uninstall ${PROJECT} --namespace ${NAMESPACE}
    - kubectl delete namespace ${NAMESPACE}
  tags:
    - ${RUNNER}