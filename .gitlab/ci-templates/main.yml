include:
  - local: '.gitlab/ci-templates/environments/dev.yml'
    rules:
      - if: $CI_COMMIT_TAG !~ /release-v.*/ && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  - local: '.gitlab/ci-templates/environments/stg.yml'
    rules:
      - if: $CI_COMMIT_TAG !~ /release-v.*/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - local: '.gitlab/ci-templates/environments/prd.yml'
    rules:
      - if: $CI_COMMIT_TAG =~ /release-v.*/

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG =~ /release-v.*/'
    - if: '$CI_PIPELINE_SOURCE == "web"'



stages:
  - build
  - deploy
  - release
  - destroy


.dev-rules:
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/

.dev-destroy-rules:
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/
      when: manual

.stg-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/

.stg-destroy-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG !~ /release-v.*/
      when: manual

.prd-rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /release-v.*/

.prd-destroy-rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /release-v.*/
      when: manual



.build:
  stage: build
  image: docker:latest
  variables:
    IMAGE_TAG: ${ENV}-${CI_COMMIT_REF_SLUG}
    IMAGE: ${CI_REGISTRY_IMAGE}/${APP}:${IMAGE_TAG}
  services:
    - docker:dind
  before_script:
    - cd app/${APP}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --tag ${IMAGE} .
    - docker push ${IMAGE}
  tags:
    - ${RUNNER}
  # rules:
  #   - changes: 
  #       - app/**/*

.deploy-configure:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  variables:
    IMAGE_TAG: ${ENV}-${CI_COMMIT_REF_SLUG}
  before_script: 
    - kubectl config get-contexts
    - kubectl config use-context ${K8S_CLUSTER}
    - |
      if [ "${ENV}" == "dev" ]; then
        export K8S_NAMESPACE=${ENV}-${CI_COMMIT_REF_SLUG:0:59}
      else
        export K8S_NAMESPACE=${ENV_LONG}
      fi


.deploy:
  extends:
    - .deploy-configure
  stage: deploy
  script:
    - cd k8s
    - sed -i -e "s|<IMAGE>|${CI_REGISTRY_IMAGE}/frontend:${IMAGE_TAG}|g" frontend.yml
    - sed -i -e "s|<IMAGE>|${CI_REGISTRY_IMAGE}/backend:${IMAGE_TAG}|g" backend.yml
    - sed -i -e "s|<DOMAIN>|${DOMAIN}|g" ingress.yml
    - kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
    - kubectl apply -f . -n ${K8S_NAMESPACE}
  tags:
    - ${RUNNER}


.release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release job"
  release: 
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Docker Container'
          url: 'https://${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}'
  tags:
    - ${RUNNER}


.destroy:
  extends:
    - .deploy-configure
  stage: destroy
  script:
    - cd k8s
    - kubectl delete -f . -n ${K8S_NAMESPACE}
    - kubectl delete namespace ${K8S_NAMESPACE}
  tags:
    - ${RUNNER}
